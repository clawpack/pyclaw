def test_2d_psystem():
    """test_2d_psystem"""

    def verify_data():
        def verify(test_state):
            """ verifies gauge values generated by 2d psystem application 
            from a previously verified run """
            
            import os
            import numpy as np
            from clawpack.pyclaw.util import check_diff

            gauge_files = test_state.grid.gauge_files
            gauge_path = test_state.grid.gauge_path
            test_gauge_data= test_state.gauge_data
            test_err=[]
            thisdir = os.path.dirname(__file__)
            
            if test_gauge_data is not None:
                for i, gauge in enumerate(test_gauge_data):
                    verify_file = os.path.join(thisdir,'verify_' +
                                            gauge_files[i].name.split('/')[-1])
                    test_err.append(np.linalg.norm(gauge - 
                                                   np.loadtxt(verify_file)))

                expected_err = 0
                test_err_norm =  np.linalg.norm(np.array(test_err))

                return check_diff(expected_err, test_err_norm, abstol=1)
            else:
                return
                
        return verify

    from clawpack.pyclaw.util import gen_variants
    from psystem import psystem2D

    classic_tests = gen_variants(psystem2D, verify_data(),
                                 kernel_languages=('Fortran',), 
                                 solver_type='classic')

    from itertools import chain
    for test in chain(classic_tests):
        yield test
